<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Java | Slightly Ahead of Behind the Curve]]></title>
  <link href="http://thekidds.org/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://thekidds.org/"/>
  <updated>2016-03-10T10:29:40-05:00</updated>
  <id>http://thekidds.org/</id>
  <author>
    <name><![CDATA[Robb Kidd]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Cramming a Sinatra App into a JAR]]></title>
    <link href="http://thekidds.org/blog/2015/05/06/cramming-a-sinatra-app-into-a-jar/"/>
    <updated>2015-05-06T14:36:54-04:00</updated>
    <id>http://thekidds.org/blog/2015/05/06/cramming-a-sinatra-app-into-a-jar</id>
    <content type="html"><![CDATA[<p>We recently solved a problem for allowing our internal users to easily update
records in a legacy data store by providing a simple web interface via a Sinatra
app. Sweet! Now we have to deploy it: Ruby runtime in production. Oh. Nuts. How?</p>

<!-- more -->


<p>The new hotness would be to generate a Docker image of the app, but the
organization is still considering the security implications of Docker containers
in production. Deploy to a Linux host and use the distribution&rsquo;s Ruby package?
No, version is too old. Chef or Puppet to install an up-to-date MRI Ruby runtime
on the host? Maybe, but we like to put as many of the dependencies into a
component package as possible. Omnibus? On the to-learn list and our users would
really like to use this interface soon. What one, trustworthy thing could I
easily put on the server to let it run a Sinatra app?</p>

<p>Java.</p>

<p>Oh yeah. JRuby.</p>

<p>An introduction to a fake version of the app might be in order for me to show
the work.</p>

<p>The libraries used in the app and to package the app as a JAR file.</p>

<p>```ruby Gemfile
source &ldquo;<a href="https://rubygems.org">https://rubygems.org</a>&rdquo;</p>

<p>gem &ldquo;haml&rdquo;      # It&rsquo;s a simple app, yo.
gem &ldquo;sinatra&rdquo;   # Sing for me, Frank.
gem &ldquo;puma&rdquo;      # JRuby-friendly app server</p>

<p>group :development do
  gem &lsquo;pry&rsquo;     # prettier irb
  gem &lsquo;warbler&rsquo; # heavy lifter for JAR'ing the app
end
```</p>

<p>The core of the app itself.</p>

<p>```ruby lib/awesome_sauce.rb
require &lsquo;sinatra&rsquo;</p>

<p>class AwesomeSauce &lt; Sinatra::Application
  require &lsquo;haml&rsquo;</p>

<p>  get &lsquo;/&rsquo; do</p>

<pre><code>haml :root_sauciness
</code></pre>

<p>  end
end
```</p>

<p>The view for <code>:root_sauciness</code>.</p>

<p><code>ruby views/root_sauciness.rb
!!! XML
!!!
%html
 %head
  %title Awesome Sauce
  %meta{ 'http-equiv' =&gt; 'Content-Type', :content =&gt; 'text/html; charset=utf-8' }
 %body
 %h1 The root of the sauce is awesome.
</code></p>

<p>A rackup file. Why not <code>config.ru</code>? Because by putting it in <code>bin/</code>, Warbler
will create a JAR, not a WAR, and will by default use this file as the first
thing run by the JAR.</p>

<p>```ruby bin/web.ru</p>

<h1>!/usr/bin/env jruby</h1>

<p>$LOAD_PATH.unshift(File.expand_path(&ldquo;#{File.dirname(<strong>FILE</strong>)}/../lib&rdquo;))
require &lsquo;puma&rsquo;
require &lsquo;awesome_sauce&rsquo;</p>

<p>configure do
  set :views, &lsquo;./views&rsquo; # foreshadowing: this line will change later
  set :server, %w[puma]
end</p>

<p>AwesomeSauce.run!
```</p>

<p>A Warbler configuration for making the JAR.</p>

<p><code>ruby config/warble.rb
Warbler::Config.new do |config|
  config.features = %w(executable)
  config.dirs = %w(bin lib views)
end
</code></p>

<p>OK. Let&rsquo;s run this &hellip;</p>

<p>``` bash
» bundle install
Using rake 10.4.2
Using coderay 1.1.0
Using ffi 1.9.8
Using tilt 2.0.1
Using haml 4.0.6
Using jruby-jars 1.7.20
Using jruby-rack 1.1.18
Using method_source 0.8.2
Using slop 3.6.0
Using spoon 0.0.4
Using pry 0.10.1
Using rack 1.6.1
Using puma 2.11.2
Using rack-protection 1.5.3
Using rubyzip 1.1.7
Using sinatra 1.4.6
Using warbler 1.4.7
Using bundler 1.9.4
Bundle complete! 5 Gemfile dependencies, 18 gems now installed.
Bundled gems are installed into ./vendor.</p>

<p>» bundle exec warble
No executable matching config.jar_name found, using bin/web.ru
rm -f awesome_sauce.jar
Creating awesome_sauce.jar</p>

<p>» java -jar awesome_sauce.jar
Puma 2.11.2 starting&hellip;
* Min threads: 0, max threads: 16
* Environment: development
* Listening on tcp://localhost:4567
== Sinatra (v1.4.6) has taken the stage on 4567 for development with backup from Puma</p>

<p>```</p>

<p>Opening <code>localhost:4567</code> in a browser shows me something like:</p>

<h2>The root of the sauce is awesome.</h2>

<p>Sweet.</p>

<p>Let&rsquo;s put that JAR file up on a server (in this case a Vagrant machine
for testing) and try there.</p>

<p>```bash Running from /vagrant
vagrant@vagrant-ubuntu-trusty-64:/vagrant$ java -jar awesome_sauce.jar &amp;
[1] 1588
vagrant@vagrant-ubuntu-trusty-64:/vagrant$ Puma 2.11.2 starting&hellip;
* Min threads: 0, max threads: 16
* Environment: development
* Listening on tcp://localhost:4567
== Sinatra (v1.4.6) has taken the stage on 4567 for development with backup from Puma</p>

<p>vagrant@vagrant-ubuntu-trusty-64:/vagrant$ curl localhost:4567
&lt;!DOCTYPE html>
<html>
  <head></p>

<pre><code>&lt;title&gt;Awesome Sauce&lt;/title&gt;
&lt;meta content='text/html; charset=utf-8' http-equiv='Content-Type'&gt;
</code></pre>

<p>  </head>
  <body></p>

<pre><code>&lt;h1&gt;The root of the sauce is awesome.&lt;/h1&gt;
</code></pre>

<p>  </body>
</html>
127.0.0.1 &ndash; &ndash; [09/May/2015:15:24:36 +0000] &ldquo;GET / HTTP/1.1&rdquo; 200 221 0.1170
```</p>

<p>Cool. It works and I only had to install a Java runtime on the server.
Let&rsquo;s try running it from a more production-like directory.</p>

<p>:</p>
]]></content>
  </entry>
  
</feed>
