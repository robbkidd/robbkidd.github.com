<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Slightly Ahead of Behind the Curve]]></title>
  <link href="http://thekidds.org/atom.xml" rel="self"/>
  <link href="http://thekidds.org/"/>
  <updated>2016-03-30T11:32:24-04:00</updated>
  <id>http://thekidds.org/</id>
  <author>
    <name><![CDATA[Robb Kidd]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Run Dependency Services in Docker]]></title>
    <link href="http://thekidds.org/blog/2016/03/10/run-dependency-services-in-docker/"/>
    <updated>2016-03-10T08:47:17-05:00</updated>
    <id>http://thekidds.org/blog/2016/03/10/run-dependency-services-in-docker</id>
    <content type="html"><![CDATA[<p>My current primary project is a Rails app that depends on PostgreSQL and Redis.
I used to run those services directly on my Mac OS development workstation, but
didn&rsquo;t like the untidiness of having services I wasn&rsquo;t using all the time
running all the time. Or that the default install might leave the services
listening on all interfaces so that everyone in the coffee shop could poke at my
test data. (Nah. I&rsquo;ve got a firewall and <a href="https://www.obdev.at/products/littlesnitch">so should you</a>.)
I figured, &ldquo;Hey, I could use Docker to cordon these services off.&rdquo;</p>

<!-- more -->


<p><img src="http://thekidds.org/images/so-hot-right-now.jpg" alt="Docker, so hot right now" /></p>

<h1>Prepare Your App</h1>

<p>First, I had to make sure my config files would be happy with the usual defaults
of services running on localhost.</p>

<h2>PostgreSQL</h2>

<p>For PostgreSQL, we update the database configuration to accept an IP address
from an environment variable, otherwise use localhost as it did before.</p>

<figure class='code'><figcaption><span>config/database.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="x">development:</span>
</span><span class='line'><span class="x">  adapter: postgresql</span>
</span><span class='line'><span class="x">  database: derelicte_development</span>
</span><span class='line'><span class="x">  host: </span><span class="cp">&lt;%=</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;POSTGRES_IP&#39;</span><span class="o">]</span> <span class="o">||</span> <span class="s1">&#39;localhost&#39;</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  pool: 30</span>
</span><span class='line'>
</span><span class='line'><span class="x">test:</span>
</span><span class='line'><span class="x">  adapter: postgresql</span>
</span><span class='line'><span class="x">  database: derelicte_test</span>
</span><span class='line'><span class="x">  host: </span><span class="cp">&lt;%=</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;POSTGRES_IP&#39;</span><span class="o">]</span> <span class="o">||</span> <span class="s1">&#39;localhost&#39;</span> <span class="cp">%&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>NOTE: We will still need a version of PostgreSQL installed—but not services
<em>running</em>—on the local filesystem for development libraries to be available to
be able to build the <code>pg</code> gem. Configure bundler to know where to find
PostgreSQL libraries. For example, we have
<a href="https://www.codefellows.org/blog/three-battle-tested-ways-to-install-postgresql">PostgreSQL installed via Homebrew</a>,
so we run the following to configure bundler:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>bundle config build.pg --with-pg-config<span class="o">=</span>/usr/local/bin/pg_config
</span></code></pre></td></tr></table></div></figure>


<h2>Redis</h2>

<p>Our application had long received the Redis connection information via an
environment variable in an initializer.</p>

<figure class='code'><figcaption><span>config/initializers/redis.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># ...</span>
</span><span class='line'>  <span class="n">redis_url</span> <span class="o">=</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;REDIS_URL&#39;</span><span class="o">]</span> <span class="o">||</span> <span class="s1">&#39;redis://localhost:6379/0/derelicte&#39;</span>
</span><span class='line'><span class="c1"># ...</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Services in Docker</h1>

<p>With the application configurable by environment variables (but with sensible
defaults), we can move on to installing Docker and getting the services running.</p>

<h2>Docker Prerequisites</h2>

<p>Docker on a Mac requires some sort of hypervisor—like Virtualbox or VMware—to
run a Linux virtual machine (VM) which supports the container features Docker
uses. Virtualbox is the easiest to get started with.</p>

<ul>
<li><p><a href="https://www.virtualbox.org/wiki/Downloads">Download</a> and install Virtualbox.</p></li>
<li><p>Install <code>docker-machine</code> and <code>docker</code>. With <a href="http://brew.sh/">Homebrew</a>:</p></li>
</ul>


<figure class='code'><figcaption><span>install the things</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>brew install docker docker-machine
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Create a <code>docker-machine</code> VM on which to run Docker services. The following command assumes your hypervisor is VirtualBox and that you will name this host &ldquo;default&rdquo;.</li>
</ul>


<figure class='code'><figcaption><span>create the docker-machine VM</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>docker-machine create --driver virtualbox default
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Set the environment variables for the application configuration. This can be
done by hand or we can automate the setup with something like <code>direnv</code>. See
<a href="http://thekidds.org/blog/2016/03/07/closer-to-environmental-bliss-with-direnv">Closer to Environmental Bliss with Direnv</a> for more on direnv.</li>
</ul>


<figure class='code'><figcaption><span>environment setup</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">eval</span> <span class="k">$(</span>docker-machine env default<span class="k">)</span>
</span><span class='line'><span class="nb">export </span><span class="nv">DOCKER_IP</span><span class="o">=</span><span class="k">$(</span>docker-machine ip default<span class="k">)</span>
</span><span class='line'><span class="nb">export </span><span class="nv">POSTGRES_IP</span><span class="o">=</span><span class="nv">$DOCKER_IP</span>
</span><span class='line'><span class="nb">export </span><span class="nv">REDIS_URL</span><span class="o">=</span><span class="s2">&quot;redis://${DOCKER_IP}:6379/0/derelicte&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Manage the Services</h2>

<p>Now we can use <code>docker</code> to control the Docker services running in the <code>default</code>
Docker Machine VM. Now we can actually run PostgreSQL and Redis.</p>

<figure class='code'><figcaption><span>test docker command</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>docker info
</span></code></pre></td></tr></table></div></figure>


<p>That should return lots of information about the running Docker services in the
VM.</p>

<figure class='code'><figcaption><span>start postgresql</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>docker run <span class="se">\</span>
</span><span class='line'>      --detach<span class="o">=</span><span class="nb">true</span> <span class="se">\</span>
</span><span class='line'>      --env <span class="nv">POSTGRES_USER</span><span class="o">=</span><span class="nv">$USER</span>  <span class="se">\</span>
</span><span class='line'>      --publish 5432:5432 <span class="se">\</span>
</span><span class='line'>      --name derelicte-pg <span class="se">\</span>
</span><span class='line'>      postgres:9.3
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>start redis</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>docker run <span class="se">\</span>
</span><span class='line'>      --detach<span class="o">=</span><span class="nb">true</span> <span class="se">\</span>
</span><span class='line'>      --publish 6379:6379 <span class="se">\</span>
</span><span class='line'>      --name derelicte-redis <span class="se">\</span>
</span><span class='line'>      redis:3.0
</span></code></pre></td></tr></table></div></figure>


<p>These <code>docker run</code> commands retrieve already configured container images from
DockerHub and runs them. Ports are forwarded from the running containers to the
Docker Machine VM&rsquo;s network interface. The commands are a bit long, so I
recommend scripting them, possibly by adding them to a rake task like
<code>setup:docker</code>. Maybe go a step further and have a rake task that chains the
docker runs with <code>db:create</code>, <code>db:migrate</code>, <code>db:test:prepare</code>.</p>

<figure class='code'><figcaption><span>check on running containers</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>docker ps
</span><span class='line'>CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES
</span><span class='line'>9ca2dbac647e        redis:3.0           <span class="s2">&quot;/entrypoint.sh redis&quot;</span>   4 seconds ago       Up 3 seconds        0.0.0.0:6379-&gt;6379/tcp   derelicte-redis
</span><span class='line'>5009b1db0c08        postgres:9.3        <span class="s2">&quot;/docker-entrypoint.s&quot;</span>   4 seconds ago       Up 3 seconds        0.0.0.0:5432-&gt;5432/tcp   derelicte-pg
</span></code></pre></td></tr></table></div></figure>


<p>At this point, with the application configured and the services running, we can
start running tests and a development server on the workstation. PostgreSQL and
Redis are safely listening on a host-only interface on the Docker Machine VM. To
scrap the services and start fresh, stop the containers individually.</p>

<figure class='code'><figcaption><span>blow away the database and redis containers - WILL LOSE DATA</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>docker rm -f derelicte-redis
</span><span class='line'><span class="nv">$ </span>docker rm -f derelicte-pg
</span><span class='line'><span class="nv">$ </span>docker ps
</span><span class='line'>CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
</span></code></pre></td></tr></table></div></figure>


<p>Then, if those run commands are in a rake task:</p>

<figure class='code'><figcaption><span>run those containers again</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">time </span>be rake setup:docker
</span><span class='line'><span class="c"># lotsa output</span>
</span><span class='line'>8fb8df60a4aea74d84c87be8a16b10315c8d269e5c44b34df74ff53c76738357
</span><span class='line'>d5f363fe1940fe39257c7a5f488d1c6007644c24039f091b634d5857ed69ab34
</span><span class='line'>bundle <span class="nb">exec </span>rake setup:docker  2.61s user 0.93s system 91% cpu 3.868 total
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span><span class="nb">time </span>be rake db:create db:migrate db:seed db:test:prepare
</span><span class='line'><span class="c"># a lot more output</span>
</span><span class='line'>bundle <span class="nb">exec </span>rake db:create db:migrate db:seed db:test:prepare  4.41s user 1.64s system 73% cpu 8.175 total
</span></code></pre></td></tr></table></div></figure>


<p>Aww yeah, 4 second recreate and 8 second setup and we&rsquo;re ready to test.</p>

<p><img src="http://thekidds.org/images/beautiful.gif" alt="It's beautiful!" /></p>

<p>We can blow away the entire Docker Machine VM for even more pave-the-earth
destruction, but this will destroy <em>all</em> the containers in that VM and will
lengthen the next startup because images will need to be downloaded from
DockerHub again. Beware if using the same Docker Machine for more than
one project.</p>

<figure class='code'><figcaption><span>destroy and recreate the docker machine</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>docker-machine rm default
</span><span class='line'>About to remove default
</span><span class='line'>Are you sure? <span class="o">(</span>y/n<span class="o">)</span>: y
</span><span class='line'>Successfully removed default
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>docker-machine create -d virtualbox default
</span></code></pre></td></tr></table></div></figure>


<p>We should reinitialize the environment variables set earlier—super handy if you
control them with direnv: <code>direnv reload</code>—because the docker-machine IP may have
changed after being recreated.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Closer to Environmental Bliss With Direnv]]></title>
    <link href="http://thekidds.org/blog/2016/03/07/closer-to-environmental-bliss-with-direnv/"/>
    <updated>2016-03-07T16:10:55-05:00</updated>
    <id>http://thekidds.org/blog/2016/03/07/closer-to-environmental-bliss-with-direnv</id>
    <content type="html"><![CDATA[<p>I was a long time user of <a href="https://rvm.io/">RVM</a> for installing and switching
Rubies. It made my life pretty easy even as I listened to others struggle with
it. I was a little uncomfortable putting other things like project-specific
environment variables in my <code>.rvmrc</code> files. It seemed dirty, but it worked and I
rolled with it for many years.</p>

<p>Eventually, I tried something different. I&rsquo;d been sold on the idea of using
multiple, simpler tools together. Here&rsquo;s the result.</p>

<!-- more -->


<h2>Installing a Ruby: <code>ruby-install</code></h2>

<p><code>brew install ruby-install</code></p>

<p>And then <code>ruby-install ruby-2.2</code> got me the Ruby I wanted. &ldquo;Too simple,&rdquo; I
thought. &ldquo;Now I won&rsquo;t be able to say I want to use that version.&rdquo;</p>

<h2>Use a Ruby: <code>chruby</code></h2>

<p><code>brew install chruby</code></p>

<p>And then <code>chruby</code> spat out a list of installed Rubies.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>» chruby
</span><span class='line'>   ruby-2.2.4</span></code></pre></td></tr></table></div></figure>


<p>OK.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>» chruby ruby-2.2.4
</span><span class='line'>» chruby
</span><span class='line'> * ruby-2.2.4
</span><span class='line'>» ruby --version                                                           1 ↵
</span><span class='line'>ruby 2.2.4p230 (2015-12-16 revision 53155) [x86_64-darwin15]</span></code></pre></td></tr></table></div></figure>


<p>&ldquo;Hunh,&rdquo; thinks I. <code>chruby</code> will by default find Rubies installed in the default
directory used by <code>ruby-install</code>: <code>/opt/rubies/</code> and <code>~/.rubies/</code>.</p>

<p>&ldquo;OK. But now I have to run that for each project to get the Ruby the project
needs.&rdquo;</p>

<h2>Project-Specific Environments: <code>direnv</code></h2>

<p>Enter <code>direnv</code>.</p>

<p><code>brew install direnv</code></p>

<p>Then create an <code>.envrc</code> file in a project root directory with the appropriate
commands for the project. It can be made pretty convenient by adding the
following function to a <code>.direnvrc</code> file in your HOME directory.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># add to ~/.direnvrc</span>
</span><span class='line'>use_ruby<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="c"># enable the chruby command in an environment</span>
</span><span class='line'>  <span class="nb">source</span> /usr/local/opt/chruby/share/chruby/chruby.sh
</span><span class='line'>
</span><span class='line'>  <span class="c"># desired Ruby version as first parameter</span>
</span><span class='line'>  <span class="nb">local </span><span class="nv">ver</span><span class="o">=</span><span class="nv">$1</span>
</span><span class='line'>
</span><span class='line'>  <span class="c"># if version not given as parameter and there is a .ruby-version file, get</span>
</span><span class='line'>  <span class="c"># version from the file</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">[[</span> -z <span class="nv">$ver</span> <span class="o">]]</span> <span class="o">&amp;&amp;</span> <span class="o">[[</span> -f .ruby-version <span class="o">]]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">    </span><span class="nv">ver</span><span class="o">=</span><span class="k">$(</span>cat .ruby-version<span class="k">)</span>
</span><span class='line'>  <span class="k">fi</span>
</span><span class='line'>
</span><span class='line'>  <span class="c"># if the version still isn&#39;t set, error cause we don&#39;t know what to do</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">[[</span> -z <span class="nv">$ver</span> <span class="o">]]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">    </span><span class="nb">echo </span>Unknown ruby version
</span><span class='line'>    <span class="nb">exit </span>1
</span><span class='line'>  <span class="k">fi</span>
</span><span class='line'>
</span><span class='line'>  <span class="c"># switch to the desired ruby version</span>
</span><span class='line'>  chruby <span class="nv">$ver</span>
</span><span class='line'>
</span><span class='line'>  <span class="c"># Sets the GEM_HOME environment variable to `$PWD/.direnv/ruby/RUBY_VERSION`.</span>
</span><span class='line'>  <span class="c"># This forces the installation of any gems into the project’s sub-folder. If</span>
</span><span class='line'>  <span class="c"># you’re using bundler it will create wrapper programs that can be invoked</span>
</span><span class='line'>  <span class="c"># directly instead of using the `bundle exec` prefix.</span>
</span><span class='line'>  layout_ruby
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Thanks to <a href="http://tooky.co.uk/using-direnv-and-chruby-together/">Steve Tooke</a>
for most of the above.</p>

<p>So one of my projects is a Rails app. It&rsquo;s <code>.envrc</code> looks like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># .envrc for a Rails project</span>
</span><span class='line'><span class="nb">export </span><span class="nv">RUBY_GC_MALLOC_LIMIT</span><span class="o">=</span>90000000
</span><span class='line'><span class="nb">export </span><span class="nv">RUBY_GC_HEAP_FREE_SLOTS</span><span class="o">=</span>200000
</span><span class='line'>
</span><span class='line'>use ruby 2.2.4
</span></code></pre></td></tr></table></div></figure>


<p>This sets some environment variables suitable for testing and switches my Ruby
environment around. I get Ruby version 2.2.4 and GEM_HOME, GEM_PATH, and
GEM_ROOT adjusted to bring in global gems from the 2.2.4 install and
project-specific gems from <code>&lt;project-root&gt;/.direnv/ruby</code> thanks to direnv&rsquo;s
<code>layout ruby</code> <a href="https://direnv.readthedocs.org/en/latest/commands/direnv-stdlib/#layout-ruby">feature</a>.
I recommend adding <code>.direnv</code> to your project&rsquo;s <code>.gitignore</code>.</p>

<h2>Bonus Round &ndash; Chef DK!</h2>

<p>I use Chef and the recommended way to install Chef on a development workstation
is to <a href="https://downloads.chef.io/chef-dk/">install the Chef DK</a>. Chef DK
includes its own embedded Ruby and gem environment and <code>chruby</code> knows nothing
about it. We can use <code>direnv</code> to twiddle the environment for Chef projects.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># add to ~/.direnvrc</span>
</span><span class='line'>use_chefdk<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="nv">EXPANDED_HOME</span><span class="o">=</span><span class="sb">`</span>expand_path ~<span class="sb">`</span>
</span><span class='line'>
</span><span class='line'>  <span class="c"># Override the GEM environment</span>
</span><span class='line'>
</span><span class='line'>  log_status <span class="s2">&quot;Overriding default Ruby environment to use ChefDK&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">export </span><span class="nv">GEM_ROOT</span><span class="o">=</span><span class="s2">&quot;/opt/chefdk/embedded/lib/ruby/gems/2.1.0&quot;</span>
</span><span class='line'>  <span class="nb">export </span><span class="nv">GEM_HOME</span><span class="o">=</span><span class="s2">&quot;$EXPANDED_HOME/.chefdk/gem/ruby/2.1.0&quot;</span>
</span><span class='line'>  <span class="nb">export </span><span class="nv">GEM_PATH</span><span class="o">=</span><span class="s2">&quot;$EXPANDED_HOME/.chefdk/gem/ruby/2.1.0:/opt/chefdk/embedded/lib/ruby/gems/2.1.0&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c"># Ensure ChefDK and its embedded tools are first in the PATH</span>
</span><span class='line'>
</span><span class='line'>  log_status <span class="s2">&quot;Ensuring ChefDK and it&#39;s embedded tools are first in the PATH&quot;</span>
</span><span class='line'>
</span><span class='line'>  PATH_add <span class="nv">$EXPANDED_HOME</span>/.chefdk/gem/ruby/2.1.0/bin/
</span><span class='line'>  PATH_add /opt/chefdk/embedded/bin
</span><span class='line'>  PATH_add /opt/chefdk/bin
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Thanks to <a href="https://github.com/schisamo">Seth Chisamore</a> for the Chef DK
function.</p>

<p>Now my <code>.envrc</code> files in Chef projects have a line like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># .envrc in a Chef project</span>
</span><span class='line'>use chefdk
</span></code></pre></td></tr></table></div></figure>


<p>Eventually, I&rsquo;m going to have to solve the hard-coded Ruby version in the paths
internal to Chef DK. But it&rsquo;s working for now and I can happily switch between
Chef DK projects and projects needing their own Rubies (e.g. Rails sites).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reflections on 9-11.]]></title>
    <link href="http://thekidds.org/blog/2015/09/11/reflections-on-9-11/"/>
    <updated>2015-09-11T09:36:28-04:00</updated>
    <id>http://thekidds.org/blog/2015/09/11/reflections-on-9-11</id>
    <content type="html"><![CDATA[<p>I don&rsquo;t think I&rsquo;ve ever written down my experiences on September 11, 2001. Since
I broke down in the shower this morning, I think I probably should.</p>

<!-- more -->


<p>It was a Tuesday morning, bright and clear like today. Tuesday morning rituals
for me at the time were wake up from an overnight ambulance shift at the fire
department, unstaff the ambulance, drive home, shower, drive in to work at the
National Center for Missing and Exploited Children in old town Alexandria. I
recall hearing news on the radio on the drive in to work that a plane had struck
the World Trade Center. Everyone was very confused and there weren&rsquo;t many
details. I was just left with a &ldquo;how awful.&rdquo;</p>

<p>By the time I had reached the convenience store for the traditional morning
caffeine jolt, the second plane had hit. I found out from the Muslim man behind
the counter. &ldquo;They hit us again.&rdquo; What?</p>

<p>I was in the Alexandria office when Flight 77 struck the Pentagon. Some of us
went up to the roof and could see the column of smoke to the north.</p>

<p>Fuck.</p>

<p>I spent some time re-wiring the Center&rsquo;s training room presentation system to
get the news on the big screen. A bunch of NCMEC folks crowded in to try to keep
up with the news. I told my boss that I was leaving the office to head back to
the fire department. Then I started what turned into a three hour haul back out
to Manassas as I joined everyone leaving the city.  [UPDATE: Wife corrected me,
I didn&rsquo;t text. I stopped by the library at which she worked to check in and let
her know I was headed back to duty. I remember cell network was overloaded.]</p>

<p>Stonewall Jackson, Prince William County station 11, was a rally site for County
resources that day. Equipment was brought in. Fresh-faced recruits from the
academy were staged there. Expressions were a mixture of stunned, confused,
worried and determined. We staffed three transport units, career and volunteer.
My ambulance crew assembled some medical gear and gathered it in the station&rsquo;s
banquet hall in case some other mass-casuality incident happened way out in our
area. We had no idea what to expect for the rest of the day, so we were trying
to be prepared.</p>

<p>But mostly we were gathered together in the station day room—career, volunteer,
recruits, veterans—watching the days events on repeat, hoping nothing more was
coming. All of us wanted to get down to the Pentagon to help. We were all
quietly picturing ourselves in the boots of our sisters and brothers on the
ground at the incidents.</p>

<p>The county around us was abnormally quiet, like our citizens were glued to TVs
and therefore not busy hurting themselves or locking themselves out of their
cars. The ALS ambulances ran a couple calls, one as mutual aid into Arlington
for an illness unrelated to the incident at the Pentagon. Glebe Road. Holy crap
that&rsquo;s a lot of empty dues between us if we&rsquo;re the closest unit to Glebe Road.</p>

<p>Eventually that night response status in the county de-escalated. I went home
Tuesday night exhausted. Not from doing any real work, but emotionally from
watching my brothers and sisters: fire-fighters, EMTs, law enforcement, and
citizens. People. Worrying for them. Wanting to help.</p>

<p>&ldquo;Never Forget&rdquo; is what we&rsquo;ll read a lot today. Imperative. Imperative is not my
style.</p>

<p>&ldquo;Never Forgotten.&rdquo; Said like a promise. Those are my words.</p>

<p>Thanks, Nick, for inspiring me to share.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mind the Gap: Resources]]></title>
    <link href="http://thekidds.org/blog/2014/04/19/mind-the-gap-resources/"/>
    <updated>2014-04-19T12:20:00-04:00</updated>
    <id>http://thekidds.org/blog/2014/04/19/mind-the-gap-resources</id>
    <content type="html"><![CDATA[<p>I spoke this week at <a href="http://chefconf.opscode.com/chefconf/">ChefConf</a>
about how we use Chef at <a href="http://www.lgscout.com">my company</a> to produce
an installer for our on-premises product.
<a href="https://speakerdeck.com/robbkidd/mind-the-gap">Slides for the talk</a> are
up, but not very useful without my rambling that went with them. Instead of
making attendees madly write down the resources slide, here are links to the
resources and tools I mentioned in the talk.</p>

<!-- more -->


<ul>
<li><a href="http://vagrantup.com">Vagrant</a> from <a href="http://about.me/mitchellh">Mitchell Hashimoto</a>
and Hashicorp. We use Vagrant in our chef repo to spin up a VM for each of our node
types and perform chef runs to populate caches of things retrieved from
the network.</li>
<li><a href="https://github.com/fgrehm/vagrant-cachier">vagrant-cachier</a> by <a href="http://fabiorehm.com/">Fabio Rehm</a>
is used for centralizing the node&rsquo;s Chef cache into a single shared
folder located in the chef repo. We do not use it for caching APT
packages.</li>
<li><a href="https://www.unix-ag.uni-kl.de/~bloch/acng/">apt-cacher-ng</a> (ACNG) is what we
use for caching APT packages. On one node at chef compile time, ACNG
is installed and configured. All nodes are configured to <code>apt-get</code> with
the ACNG node as their proxy. After a successful convergence on all
nodes, the ACNG cache of downloaded packages is copied into the chef
repo.</li>
<li><a href="https://github.com/jordansissel/fpm">fpm</a> by <a href="http://www.semicomplete.com/">Jordan Sissel</a>
is the wonderment with which we package our own components and package
up the chef repo with a chef installer and the populated caches. Super
time saver for producing a variety of package formats.</li>
<li><a href="https://matschaffer.github.io/knife-solo/">knife-solo</a> by <a href="http://matschaffer.com/">Mat Schaffer</a>
was not explicitly mentioned in the talk, but gets a shout out at the
end and here. <code>knife-solo</code> has made our lives easier by letting us get
our chef repo up onto test and staging servers and starting a chef run
is out chef-solo-oriented world.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Yes This Blog Is Stale.]]></title>
    <link href="http://thekidds.org/blog/2014/04/18/yes-this-blog-is-stale/"/>
    <updated>2014-04-18T16:48:00-04:00</updated>
    <id>http://thekidds.org/blog/2014/04/18/yes-this-blog-is-stale</id>
    <content type="html"><![CDATA[<p>I <a href="http://chefconf2014.busyconf.com/schedule#activity_52ddec32fc59cd00880000c4">spoke</a>
at <a href="http://chefconf.opscode.com/chefconf/">ChefConf 2014</a> this week. A
few folks who used their Google Fu on me said, &ldquo;That&rsquo;s not your blog, is
it? Nothing has been posted in forever!&rdquo;</p>

<p>I come from a long-ish career in the security and defense industry
where we are notorious for <em>not</em> talking about how we do things. It is
taking time and effort to break habits of holding all cards close to the
chest.</p>

<p>So, yes. This is my blog. Yes, it is stale. I seem to only write when I&rsquo;ve
spoken somewhere—which isn&rsquo;t that often. I&rsquo;m working on doing more of
both of these things.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[README: The Bare Necessities]]></title>
    <link href="http://thekidds.org/blog/2012/08/04/readme-the-bare-necessities/"/>
    <updated>2012-08-04T19:35:00-04:00</updated>
    <id>http://thekidds.org/blog/2012/08/04/readme-the-bare-necessities</id>
    <content type="html"><![CDATA[<p>I gave a lightning talk at Steel City Ruby Conf 2012 today on writing a
decent README. Instead of putting the slides up somewhere, I thought I
would write up a more detailed post of the talk&rsquo;s points.</p>

<!-- more -->


<h2>Your README should &hellip;</h2>

<h3>&hellip; explain why your code exists</h3>

<p>Tell me why you wrote this code. Give me a vision statement or an
elevator pitch. &ldquo;Unlike all the other code on the internet, my project
is awesome.&rdquo; Then follow up with how your project scratches an itch
differently than others.</p>

<h3>&hellip; demonstrate how to install and use the code</h3>

<p>It could be as simple as:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem install awesome_tool</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>require 'awesome_tool'
</span><span class='line'>
</span><span class='line'>awesome_tool do
</span><span class='line'>  awesome_stuff
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>If things get complicated, use subsections or wiki pages, but try to
provide steps and examples in the README and link to the complicated
stuff.</p>

<p>As far as examples of use are concerned, start with the most common and
valuable example of using your tool. Help me understand how to make my
life better with your awesomeness.</p>

<h3>&hellip; declare copyright and licensing</h3>

<p>Tell me your licensing terms. Can I copy your code? Can I distribute it?
Can I modify it?</p>

<h3>&hellip; describe how to contribute</h3>

<p>If I can modify it, how do I get those modifications back to you, the
maintainer? Do you expect code to follow certain conventions? Do you
expect to have tests submitted with the patch? (In general, the answer
here is &ldquo;yes.&rdquo;)</p>

<p>Provide instructions on setting up the tool&rsquo;s development environment.
Tell me how to run your tests. There is nothing like trying to document
this sort of thing to cause you to throw up your arms and automate this
stuff which only makes your code more awesome.</p>

<h3>&hellip; give credit</h3>

<p>Take credit! You wrote an awesome tool! Give credit to contributors.
This encourages others to contribute more awesomeness. List
authors/contributors, link to a CONTRIBUTORS file or punt to GitHub and
link to the contributors graph.</p>

<h3>&hellip; be plain text</h3>

<p>Write your README in plain text. We&rsquo;ve got decades of convention that
READMEs are readable on a simple terminal with your PAGER of choice.
Don&rsquo;t fight that.</p>

<p>I would go farther and recommend you <a href="https://raw.github.com/robbkidd/activerecord-netezza-adapter/master/README.md">write your README in Markdown</a>. It
is a simple plain text markup that is refreshingly free of noisy markup
like HTML tags that I have to ignore. The benefit is that some tools
like GitHub and GitLabHQ
<a href="https://github.com/robbkidd/activerecord-netezza-adapter/blob/master/README.md">turn your README.md into a web page</a>.
Yay! Your project has a README <em>and</em> a web page with structure,
hyperlinks and syntax-highlighted code blocks.</p>

<p>Even better, a tool called <a href="http://johnmacfarlane.net/pandoc/">PanDoc</a>
can turn your README.md into a PDF. If you provided headings and
sub-headings (with hash marks &ldquo;#&rdquo;) in your markdown, you can tell PanDoc
to include a table of contents in your PDF for easy navigation.</p>

<h2>Leveling Up?</h2>

<p>Tim Preston-Werner of GitHub fame has an argument for
<a href="http://tom.preston-werner.com/2010/08/23/readme-driven-development.html">README Driven Development</a>.
Before you test-drive, before you behavior-drive, document your vision
for what your code will do and write some examples of code you wish you
had. Give that a read and let me know what you think.</p>

<h2>What next?</h2>

<p>What sort of documentation you produce after your essential README
depends on what your awesome tool really is, how it is used and what
sort of audience you expect to have for the docs. Library code probably
benefits best from rdoc-style embedded comments that can be compiled
into a library reference. Web APIs can be documented with guide-style
pages providing the lay of the land with references to tests written
specifically as examples of use.</p>

<p>End-user documentation can be deviously tricky. Simple, but
time-consuming to write at the beginning, end-user docs end up
atrophying, quickly becoming documents filled with misdirection as your
tool grows. I&rsquo;ve got a vision of end-user documentation being written in
something like Cucumber to include steps that can capture named
screenshots of the UI state at points in the scenarios. Markdown
documentation&mdash;possibly contained in the preamble section of the
Cucumber features&mdash;would reference the named screenshots. Run the
documentation Cucumber scenarios, run the markdown through PanDoc and
you&rsquo;ve got end-user documentation with up-to-date screenshots. No more
weeks spent manually screenshotting your app while you monkey-push
buttons and enter data to get the app in the right state for the
documentation scenario just because you changed the order of the nav
bar.</p>

<p>I&rsquo;ve not cracked this last nut. If you are interested in when I do, let
me know. If <em>you</em> have cracked this nut or have some insight into how, I
would love to talk to you. If there is interest, I plan on writing more
here or in another venue where collaboration can occur about techniques
to make documentation less painful.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Active Record, PostgreSQL and Sequence Naming]]></title>
    <link href="http://thekidds.org/blog/2012/07/27/active-record-postgres-and-sequence-naming/"/>
    <updated>2012-07-27T16:33:00-04:00</updated>
    <id>http://thekidds.org/blog/2012/07/27/active-record-postgres-and-sequence-naming</id>
    <content type="html"><![CDATA[<p>If you use PostgreSQL to back your Active Record models, you should
check the current names for your tables and their sequences. Prior to
Active Record 3.2.7, renaming a table did not rename the associated
sequence for the table&rsquo;s primary key.</p>

<p>A demonstration may be in order.</p>

<!-- more -->




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>robb@neoldian ~/code/pg_seq » rails generate model Product name:string description:text
</span><span class='line'>      invoke  active_record
</span><span class='line'>      create    db/migrate/20120727210734_create_products.rb
</span><span class='line'>      create    app/models/product.rb
</span><span class='line'>      invoke    test_unit
</span><span class='line'>      create      test/unit/product_test.rb
</span><span class='line'>      create      test/fixtures/products.yml
</span><span class='line'>
</span><span class='line'>robb@neoldian ~/code/pg_seq » rake db:migrate
</span><span class='line'>==  CreateProducts: migrating =================================================
</span><span class='line'>-- create_table(:products)
</span><span class='line'>NOTICE:  CREATE TABLE will create implicit sequence "products_id_seq" for serial column "products.id"
</span><span class='line'>NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "products_pkey" for table "products"
</span><span class='line'>   -&gt; 0.0194s
</span><span class='line'>==  CreateProducts: migrated (0.0196s) ========================================</span></code></pre></td></tr></table></div></figure>


<p>Note that on line 11 the <code>CREATE TABLE</code> created an implicit sequence
<code>products_id_seq</code> for serial column <code>products.id</code>.</p>

<p>Let&rsquo;s rename the table.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>robb@neoldian ~/code/pg_seq » rails generate migration RenameProductsToWidgets
</span><span class='line'>      invoke  active_record
</span><span class='line'>      create    db/migrate/20120727211235_rename_products_to_widgets.rb
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>db/migrate/20120727211235_rename_products_to_widgets.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">RenameProductsToWidgets</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Migration</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">up</span>
</span><span class='line'>    <span class="n">rename_table</span> <span class="ss">:products</span><span class="p">,</span> <span class="ss">:widgets</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">down</span>
</span><span class='line'>    <span class="n">rename_table</span> <span class="ss">:widgets</span><span class="p">,</span> <span class="ss">:products</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>robb@neoldian ~/code/pg_seq » rake db:migrate
</span><span class='line'><span class="o">==</span>  RenameProductsToWidgets: <span class="nv">migrating</span> <span class="o">========================================</span>
</span><span class='line'>-- rename_table<span class="o">(</span>:products, :widgets<span class="o">)</span>
</span><span class='line'>   -&gt; 0.0019s
</span><span class='line'><span class="o">==</span>  RenameProductsToWidgets: migrated <span class="o">(</span>0.0020s<span class="o">)</span> <span class="o">===============================</span>
</span></code></pre></td></tr></table></div></figure>


<p>What do you expect the sequence for the <code>id</code> column in the <code>widgets</code>
table to be named at this point? <code>widgets_id_seq</code>?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>                                  Table <span class="s2">&quot;public.widgets&quot;</span>
</span><span class='line'>   Column    |            Type             |                       Modifiers
</span><span class='line'>-------------+-----------------------------+-------------------------------------------------------
</span><span class='line'> id          | integer                     | not null default nextval<span class="o">(</span><span class="s1">&#39;products_id_seq&#39;</span>::regclass<span class="o">)</span>
</span><span class='line'> name        | character varying<span class="o">(</span>255<span class="o">)</span>      |
</span><span class='line'> description | text                        |
</span><span class='line'> created_at  | timestamp without <span class="nb">time </span>zone | not null
</span><span class='line'> updated_at  | timestamp without <span class="nb">time </span>zone | not null
</span><span class='line'>Indexes:
</span><span class='line'><span class="s2">&quot;products_pkey&quot;</span> PRIMARY KEY, btree <span class="o">(</span>id<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The who the what?</p>

<p>On line 4, the next value for the <code>widgets.id</code> column is coming
from a sequence named <code>products_id_seq</code>. This is not catastrophic
for small code bases, but imagine coming across this database
months or years from now. &ldquo;Why&rsquo;s the widget table have a sequence
named &lsquo;products&rsquo;?&rdquo;</p>

<p>The good news is that
<a href="https://github.com/rails/rails/pull/7031">AR v3.2.7 includes a fix for this</a>.
When you rename a table, if the name of the sequence for the table&rsquo;s
primary key matches the AR default &ldquo;tablename_columnname_seq&rdquo;, then
the sequence will be renamed as well. (I suppose the next order of
business is to get that index renamed, too.)</p>

<p>So you might want to go take a look at your PostgreSQL tables. Their sequences
probably have names that do not make any sense now.</p>

<p>You can use this gist in your Rails console as a quick way to check.</p>

<div><script src='https://gist.github.com/3190645.js'></script>
<noscript><pre><code>def check_table_and_sequence_names
  connection = ActiveRecord::Base.connection
  if connection.adapter_name == &quot;PostgreSQL&quot;
    table_names = connection.tables.keep_if { |t| t !~ /schema_migrations/ }
    table_names.map { |t| [t, connection.pk_and_sequence_for(t)].flatten }
  end
end

check_table_and_sequence_names
# =&gt; [[&quot;tablename&quot;, &quot;primarykeyname&quot;, &quot;sequencename&quot;]] 
</code></pre></noscript></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RC File for Your Windows Command Prompt]]></title>
    <link href="http://thekidds.org/blog/2012/07/06/rc-file-for-your-windows-command-prompt/"/>
    <updated>2012-07-06T14:41:00-04:00</updated>
    <id>http://thekidds.org/blog/2012/07/06/rc-file-for-your-windows-command-prompt</id>
    <content type="html"><![CDATA[<p>I had trouble today with my Windows <code>%HOME%</code> changing and throwing off
<a href="http://vagrantup.com">Vagrant</a>&rsquo;s awareness of what boxes are installed.
This may be your problem if Vagrant on Windows was working happily for
you and then barks about no boxes.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>C:\Users\you&gt; vagrant box list
</span><span class='line'>There are no installed boxes! Use `vagrant box add` to add some.
</span><span class='line'>
</span><span class='line'>C:\Users\you&gt;dir /b .vagrant.d\boxes
</span><span class='line'>base-i-really-exist
</span><span class='line'>centos-does-too
</span><span class='line'>
</span><span class='line'>C:\Users\you&gt;echo %HOME%
</span><span class='line'>&lt;somewhere not C:\Users\you&gt;
</span><span class='line'>
</span><span class='line'>C:\Users\you&gt;set HOME=%USERPROFILE%
</span><span class='line'>
</span><span class='line'>C:\Users\you&gt;vagrant box list
</span><span class='line'>base-i-really-exist
</span><span class='line'>centos-does-too</span></code></pre></td></tr></table></div></figure>


<p><code>%HOME%</code> was different depending on whether I logged into Windows while
on my Active Directory managed network or while I was offline. When on
the AD network, <code>%HOME%</code> is set by policy to a mapped drive. When offline,
<code>%HOME%</code> is my Windows <code>%USERPROFILE%</code>. I installed Vagrant and some base
boxes while off my AD network and everything worked as expected. Base boxes
were added to <code>%USERPROFILE%/.vagrant.d/</code>. Back in the office and logged in
on the AD network, Vagrant was no longer aware of the base boxes because
<code>%HOME%</code> now pointed at my personal mapped drive.</p>

<p>Creating a batch file to set <code>%HOME%</code> to <code>%USERPROFILE%</code> solved the problem.</p>

<figure class='code'><figcaption><span>cmdrc.bat</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bat'><span class='line'><span class="c">REM %USERPROFILE%/cmdrc.bat</span>
</span><span class='line'><span class="p">@</span><span class="k">echo</span> <span class="k">off</span>
</span><span class='line'>
</span><span class='line'><span class="k">set</span> <span class="nv">HOME</span><span class="o">=</span><span class="nv">%USERPROFILE%</span>
</span></code></pre></td></tr></table></div></figure>


<p>For UNIXy goodness, name it <code>cmdrc.bat</code>, place it in <code>%USERPROFILE%</code> and then add the following to the registry so that this file is run whenever a command prompt opens.</p>

<figure class='code'><figcaption><span>cmdrc.reg</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>Windows Registry Editor Version 5.00
</span><span class='line'>
</span><span class='line'>[HKEY_CURRENT_USER\Software\Microsoft\Command Processor]
</span><span class='line'>&quot;AutoRun&quot;=&quot;%USERPROFILE%\\cmdrc.bat&quot;
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[One Unity Launcher]]></title>
    <link href="http://thekidds.org/blog/2012/04/05/one-unity-launcher/"/>
    <updated>2012-04-05T14:43:00-04:00</updated>
    <id>http://thekidds.org/blog/2012/04/05/one-unity-launcher</id>
    <content type="html"><![CDATA[<p>T&#8217;was decided that <a href="http://www.omgubuntu.co.uk/2012/03/ubuntu-12-04-multi-monitor-to-be/">the default behavior for Unity&rsquo;s launcher will be to appear only on the primary monitor in Ubuntu 12.04</a>.
For some reason, when I upgraded to 12.04 (beta) today, my setting was
for the launcher to appear on ALL desktops. Not a fan of it on all desktops.</p>

<p>For those who want to change this setting, you&rsquo;ll need to install the Compiz
configuration manager.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo aptitude install compizconfig-settings-manager</span></code></pre></td></tr></table></div></figure>


<p>Once installed, run it.</p>

<ol>
<li>Hover the Dash Home (Ubuntu icon on launcher)</li>
<li>Type in <code>compiz</code> and click on the <code>CompizConfig Settings Manager</code> icon that appears.</li>
<li>Select <code>Desktop</code> on the left.</li>
<li>Click on <code>Ubuntu Unity Plugin</code> on the right.</li>
<li>Select the <code>Experimental</code> tab and scroll all the way down.</li>
</ol>


<p>The setting for where launchers appear is <code>Launcher Monitors</code>. As of
 today (2012/04/05), you can select either <code>Primary Desktop</code> or <code>All Desktops</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Give Your Gems Some Context for SELinux]]></title>
    <link href="http://thekidds.org/blog/2011/07/11/give-your-gems-some-context-for-selinux/"/>
    <updated>2011-07-11T18:55:00-04:00</updated>
    <id>http://thekidds.org/blog/2011/07/11/give-your-gems-some-context-for-selinux</id>
    <content type="html"><![CDATA[<p>Are you deploying your Ruby app to Red Hat or CentOS? Is Passenger complaining about not having permission to load the gems you have bundled with your app&mdash;e.g. failed to map segment from shared object: Permission denied&mdash;despite all the basic filesystem permissions looking correct? Would you like to avoid the nearly ubiquitous advice to disable SELinux, thus turning off the security that comes out of the box with SELinux enabled?</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo chcon -R -h -t httpd_sys_content_t &lt;gems path&gt;</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>chcon</code> :: Changes the security context for those executables and libraries.</li>
<li><code>-R</code> :: (recursive) All the files here, please.</li>
<li><code>-h</code> :: Affect symbolic links instead of any referenced file.</li>
<li><code>-t httpd_sys_content_t</code> :: Set the TYPE in the security context.</li>
</ul>


<p>We deploy with capistrano, so I have added this as a task called after
<code>bundle:install</code> vendors my gems to <code>&lt;appdir&gt;/shared/bundle</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">namespace</span> <span class="ss">:application</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">after</span> <span class="s1">&#39;bundle:install&#39;</span><span class="p">,</span> <span class="s1">&#39;application:update_selinux&#39;</span>
</span><span class='line'>  <span class="n">task</span> <span class="ss">:update_selinux</span><span class="p">,</span> <span class="ss">:roles</span> <span class="o">=&gt;</span> <span class="ss">:web</span> <span class="k">do</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s1">&#39;Updating SELinux context for bundled gems&#39;</span>
</span><span class='line'>    <span class="n">run</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">try_sudo</span><span class="si">}</span><span class="s2"> chcon -R -h -t httpd_sys_content_t </span><span class="si">#{</span><span class="n">applicationdir</span><span class="si">}</span><span class="s2">/shared/bundle/&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
